# -*- coding: utf-8 -*-
"""Housing Competition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bjuhtElYX9WXtoZffTGMWUAvcFHdubPY

[Source](https://www.freecodecamp.org/news/how-to-download-kaggle-dataset-to-google-colab/#:~:text=Install%20Kaggle%20library,Download%20Kaggle%20dataset)

Please login to your Kaggle account and make sure you are joined the Housing competition.
Click settings under your Icon and under API, click "Create New Token". It will download kaggle.json file to your computer.
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge,Lasso
from sklearn.linear_model import ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.tree import ExtraTreeRegressor
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error

def regression(x,y):

        #I include the regression models I will use.
        L=LinearRegression()
        R=Ridge()
        Lass=Lasso()
        E=ElasticNet()
        ETR=ExtraTreeRegressor()
        GBR=GradientBoostingRegressor()
        XGBC=XGBRegressor()
        dt=DecisionTreeRegressor()
        kn=KNeighborsRegressor()

        #I separate the data as train and test. (20% test)
        x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=42)

        #I put my models and model names in a list.
        algos=[L,R,Lass,E,ETR,GBR,XGBC,dt,kn]
        algo_names=['Linear','Ridge','Lasso','ElasticNet','Extra Tree','Gradient Boosting','XGradientBoosting','DecisionTree','KNeighbors']

        #I create empty lists for error rates and success rates, which I will fill in later.
        r2Score = []
        rmse = []
        mae = []

        #I am creating a dataframe as I want to see all results as a table.
        #Its columns will be 'R2_score', 'RMSE', 'MAE'. The indexes will take from the string I created for the model names.
        result=pd.DataFrame(columns=['R2_score','RMSE','MAE'],index=algo_names)

        #I run the regression algorithms for each model and find the results of r2_score, mean_absolute_error and mean_squared_error.
        #And I add these results I found to the empty lists I created above with the append () function.
        for algo in algos:
            p=algo.fit(x_train,y_train).predict(x_test)
            r2Score.append(r2_score(y_test,p))
            rmse.append(mean_squared_error(y_test,p)**.5)
            mae.append(mean_absolute_error(y_test,p))

        #I fill the columns in the table with these lists.
        result['R2_score']=r2Score
        result.RMSE=rmse
        result.MAE=mae

        #I sort my result table by r2_score value and return it.
        return result.sort_values('R2_score',ascending=False)

os.getcwd()

! pip install -q kaggle

from google.colab import files
files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets list

! kaggle competitions download house-prices-advanced-regression-techniques

!mkdir -p data

! unzip house-prices-advanced-regression-techniques.zip

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import statsmodels.api as sm
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler, PowerTransformer
from sklearn.metrics import mean_squared_error
from statsmodels.stats.outliers_influence import variance_inflation_factor
import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline

train_data= pd.read_csv("train.csv")
test_data = pd.read_csv("test.csv")

train_data.info()

train_data.isnull().sum()

train_data.info()

test_data.info()

######## After adding ChatGPT inspired features, you can re-run from this point on #############
################################################################################################

X = train_data.drop(['Id', 'SalePrice'], axis=1)
y= np.log(train_data['SalePrice'])

numer_cols = X.select_dtypes(include=['int64', 'float64']).columns
categ_cols = X.select_dtypes(include=['object']).columns

numer_cols

categ_cols

from sklearn.pipeline import Pipeline
numer_trans = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())])
numer_trans

categ_trans = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))])
categ_trans

from sklearn.compose import ColumnTransformer
prepro = ColumnTransformer(
    transformers=[
        ('num', numer_trans, numer_cols),
        ('cat', categ_trans, categ_cols)])
prepro

train_data.isnull().sum()

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, random_state=0)

prepro.fit(X_train)
X_train_trans = prepro.transform(X_train)
print(X_train_trans.shape)

from sklearn.linear_model import LinearRegression


X_train_trans = prepro.transform(X_train)
X_test_trans = prepro.transform(X_test)


lin_reg = LinearRegression()
lin_reg.fit(X_train_trans, y_train)

train_score = lin_reg.score(X_train_trans, y_train)
test_score = lin_reg.score(X_test_trans, y_test)

print(f"Train score: {train_score:.2f}")
print(f"Test score: {test_score:.2f}")

train_data

regression(X_test_trans, y_test)

X_test_trans2 = prepro.transform(test_data.drop(['Id'], axis=1))

predict_test = lin_reg.predict(X_test_trans2)

submission = pd.DataFrame({'Id': test_data['Id'], 'SalePrice': np.exp(predict_test)})

submission.to_csv('submission.csv', index=False)

submission.head()

from sklearn.preprocessing import PolynomialFeatures
polynomial_converter = PolynomialFeatures(degree=2,include_bias=False)
housing_train_poly = polynomial_converter.fit_transform(X_train_trans)
housing_test_poly = polynomial_converter.transform(X_test_trans)

lin_reg.fit(housing_train_poly, y_train)

train_score = lin_reg.score(housing_train_poly, y_train)
test_score = lin_reg.score(housing_test_poly, y_test)

print(f"Train score: {train_score:.2f}")
print(f"Test score: {test_score:.2f}")

X_test_trans = prepro.transform(test_data.drop(['Id'], axis=1))
X_test_trans_poly = polynomial_converter.transform(X_test_trans)

predict_test = lin_reg.predict(X_test_trans_poly)

submission = pd.DataFrame({'Id': test_data['Id'], 'SalePrice': np.exp(predict_test)})

submission.to_csv('submission2.csv', index=False)

submission.head()

"""**Regression**"""

regression(housing_test_poly, y_test)



